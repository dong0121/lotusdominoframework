'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library com.pitagora.gedys.mail
	Created Jul 12, 2010 by Gernot Hummer/Pitagora
	Description: 
	************************************************************************
	* Class for creating E-Mails in Gedys Office 7.2
	* Supports usage of user mail file signature (text)
	* Contains logic for lookup of recipient E-Mail address
	************************************************************************
%END REM
Option Public
Option Declare
Use "com.pitagora.util"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class GedysMail

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const FIELD_MAILSERVER = "MailServer"
Const FIELD_MAILPATH = "MailFile"
Const FIELD_SIGNATURE = "Signature_Rich"

Const KEY_CALENDARPROFILE = "CalendarProfile"
%REM
	Class GedysMail
	Description: Comments for Class
%END REM
Class GedysMail
	Private session As NotesSession
	Private mailDoc As NotesDocument
	Private parentSep As String
	
	%REM
		Sub New
		Description: Main constructor of class
	%END REM
	Public Sub New()
		
		Set session = New NotesSession()
		
		'setup of basic item values needed in an E-Mail
		Set Me.mailDoc = session.CurrentDatabase.CreateDocument()
		Call Me.mailDoc.ReplaceItemValue("DocType", "faMail")
		Call Me.mailDoc.ReplaceItemValue("Form", "Reply")
		Call Me.mailDoc.ReplaceItemValue("From", session.UserName)
		Call Me.mailDoc.ReplaceItemValue("LetterTemplate", "Standard Mailvorlage")
				
		Me.parentSep  = "#"
		
	End Sub
	
	%REM
		Sub setParentDoc
		Description: Connects the mail document to the handed in document
		@param doc as NotesDocument - the parent document the mail document should be connected to
	%END REM
	Public Sub setParentDoc(doc As NotesDocument)
		Dim parentIDs As String
		
		Call Me.mailDoc.ReplaceItemValue("Company", doc.GetItemValue("Company"))
		Call Me.mailDoc.ReplaceItemValue("fdParentDocTitle", doc.GetItemValue("DocTitle")(0))
		Call Me.mailDoc.ReplaceItemValue("fdParentSubject", doc.GetItemValue("Subject")(0))
		
		If doc.HasItem("ParentIDs") Then
			parentIDs = doc.GetItemValue("fdMe")(0) & Me.parentSep & doc.GetItemValue("ParentIDs")(0)
		Else
			parentIDs = doc.GetItemValue("fdMe")(0)
		End If
		
		Call Me.mailDoc.ReplaceItemValue("ParentIDs", parentIDs)
		Call Me.mailDoc.ReplaceItemValue("OldParentIDs", parentIDs)
	End Sub
	
	%REM
		Sub lookupRecipient
		Description: Dissolves the e-mail address of the parent address document and
		fills it into the SendTo item of the mail document.
	%END REM
	Public Sub lookupRecipient()
		
		Dim contactsDb As NotesDatabase
		Dim idView As NotesView
		Dim addrDoc As NotesDocument
		Dim mainLookup As String
		Dim detailLookup As String
		Dim lookupPrefs List As String
		Dim pos As Integer
		Dim targetMail As String
		Dim prefFound As Boolean
		
		lookupPrefs(0) = "CProfile"
		lookupPrefs(1) = "Company"
		prefFound = False
		
		Set contactsDb = session.GetDatabase(session.CurrentDatabase.Server, StrLeftBack(session.CurrentDatabase.FilePath, "\") & "\contacts.nsf")
		Set idView = contactsDb.GetView("(IDStructure)")
		
		mainLookup = Me.mailDoc.GetItemValue("ParentIDs")(0)
		If InStr(mainLookup, Me.parentSep) < 1 Then mainLookup = mainLookup & Me.parentSep
		pos = 1
		
		detailLookup = StrToken(mainLookup, Me.parentSep, pos)
		While detailLookup <> "" And Not prefFound
			ForAll pref In lookupPrefs
				If StrToken(detailLookup, "|", 2) = pref Then
					Set addrDoc = idView.GetDocumentByKey(StrToken(detailLookup, "|", 1))
					If Not addrDoc Is Nothing Then
						targetMail = addrDoc.GetItemValue("MailAddress")(0)
						If targetMail <> "" Then 
							prefFound = True
							Exit Forall
						End If
					End If
				End If
			End ForAll
			pos = pos + 1
			detailLookup = StrToken(mainLookup, Me.parentSep, pos)
		Wend
		
		Call Me.mailDoc.ReplaceItemValue("SendTo", targetMail)
		
	End Sub
	
	%REM
		Function getMailBodyItem
		Description: Fetches the mail documents body item (Rich Text).
		If none is available yet, it will be created.
	%END REM
	Private Function getMailBodyItem() As NotesRichTextItem
		
		If Not Me.mailDoc.HasItem("Body") Then
			
			Set getMailBodyItem = Me.mailDoc.CreateRichTextItem("Body")
			
		Else
			
			Set getMailBodyItem = Me.mailDoc.GetFirstItem("Body")
			
		End If
		
	End Function
	
	%REM
		Sub addAttachment
		Description: Attaches a file to the document
		@param filePath As String - the path to the local file system the attachment resides in
	%END REM
	Public Sub addAttachment(filePath As String)

		Call getMailBodyItem().EmbedObject(EMBED_ATTACHMENT, "", filePath)
		
	End Sub
	
	%REM
		Sub appendMailBodyText
		Description: Appends the handed in String to the mail documents body item (at the end)
		@param mailBodyText As String
	%END REM
	Public Sub appendMailBodyText(mailBodyText As String)
		
		Call getMailBodyItem().AppendText(mailBodyText)
		
	End Sub
	
	%REM
		Sub appendSignature
		Description: appends the users mail-file signtare to the body item of the mail
	%END REM
	Public Sub appendSignature()
		
		Dim mailDb As NotesDatabase
		Dim locationDoc As NotesDocument
		Dim calProfile As NotesDocument
		Dim body As NotesRichTextItem
		
		Set locationDoc = getCurrentLocation()
		
		If Not locationDoc Is Nothing Then
			
			Set mailDb = session.GetDatabase(locationDoc.GetItemValue(FIELD_MAILSERVER),_ 
				locationDoc.GetItemValue(FIELD_MAILPATH))
				
			If Not mailDb Is Nothing Then
				
				Set calProfile = mailDb.GetProfileDocument(_
					KEY_CALENDARPROFILE, session.UserName)
				
				If Not calProfile Is Nothing Then
					
					Set body = getMailBodyItem()
					
					Call body.AppendRTItem(calProfile.GetFirstItem(FIELD_SIGNATURE))
					
				End If
				
			End If
			
		End If
		
	End Sub
	
	
	%REM
		Sub summon
		Description: Summons the mail document on the workspace, visible for the user.
	%END REM
	Sub summon(workspace As NotesUIWorkspace)
		
		Call Me.mailDoc.ComputeWithForm(False, False)
		
		Call workspace.EditDocument(True, Me.mailDoc)
		
	End Sub
End Class