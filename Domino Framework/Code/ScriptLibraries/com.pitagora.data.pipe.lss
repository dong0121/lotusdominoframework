'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library com.pitagora.data.pipe
	Created Jul 15, 2010 by Gernot Hummer/Pitagora
	Description: Comments for Library
%END REM
Option Public
Option Declare
Use "com.pitagora.data"
Use "com.pitagora.data.connectionfactory"
Use "com.pitagora.log"


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class DataPipe As BaseClass

'++LotusScript Development Environment:2:5:(Declarations):0:10
%REM
	Class DataPipe
	Description: Comments for Class
%END REM
Class DataPipe As BaseClass
	Private source As DataConnection
	Private target As DataConnection
	Private config As DataRecordConfig
	Private lCol As LogEntryCollection
	
	%REM
	Sub setSource
	@param the <code>DataConnection</data> to set as source
	%END REM
	Public Sub setSource(source As DataConnection)
		Set Me.source = source
	End Sub

	%REM
		Sub setLogEntryCollection
		Description: Comments for Sub
	%END REM
	Public Sub setLogEntryCollection(lCol As LogEntryCollection)
		Set Me.lCol = lCol
	End Sub
	
	%REM
		Sub setTarget
		@param <code>DataConnection</data> to set as target
	%END REM
	Public Sub setTarget(target As DataConnection)
		Set Me.target = target
	End Sub
	
	%REM
		Sub setConfig
		@param <code>DataRecordConfig</code> to set as ruling config
	%END REM
	Public Sub setConfig(config As DataRecordConfig)
		Set Me.config = config
	End Sub
	
	%REM
		Sub run
		Description: runs the actual transfer
	%END REM
	Public Sub run()
		On Error GoTo ERROR_HANDLER
		Dim dRecord As DataRecord
		Dim bError As BaseError
		Dim recordCounter As Single
		Dim i As Integer
		
		If Not Me.source Is Nothing And Not Me.target Is Nothing And Not Me.config Is Nothing Then	
			recordCounter = 0		
			Call source.setConfig(Me.config)
			
			Call source.openConnection()
			Call target.openConnection()
			
			While Not source.isEndOfSource()
				recordCounter = recordCounter + 1
				Set dRecord = source.getNextRecord()
				Call target.commit(dRecord)
				
				'Error handling. Save occurred errors to log
				If target.hasError() Then
					For i = 0 To target.getErrorCollection().getCount() - 1
						Set bError = target.getErrorCollection().getNthError(i)
						Call Me.addToLog(ERROR_TITLE & " in record #" & Format(recordCounter, "#,##0") & ": " & bError.getErrorDesc()) 
					Next
					Call target.getErrorCollection().clear()
				End If
			Wend
			
			Call source.closeConnection()
			Call target.closeConnection()
		Else
			Set bError = New BaseError(ERROR_TITLE, "872|Transfer Pipe was not initialized correctly. Run failed.")
			Call Me.getErrorCollection().addError(bError)
			Call Me.addToLog(ERROR_TITLE & " " & CStr(bError.getErrorNum()) & ": " & bError.getErrorDesc())
		End If
		Exit Sub
		
ERROR_HANDLER:
		Call Me.addToLog(ERROR_TITLE & CStr(Err) & ": " & Error & " (#" & CStr(Erl) & ")")
		Call Me.addToLog("FATAL: Could not complete job run, terminating this jobs execution.")
		Exit Sub
	End Sub
	
	%REM
		Function addToLog
		Description: Comments for Function
	%END REM
	Private Function addToLog(msg As String)
		If Not Me.lCol Is Nothing Then
			Dim lEntry As New LogEntry(msg)
			Call Me.lCol.addEntry(lEntry)
		End If
	End Function
End Class